#!/usr/bin/env node
/*jshint node:true, strict:false*/

var jsx = false;
var block_scope = false;

//handle //CLI args (just flags, no values)
// --block-scope : highlight block scope (if es6 is on)
// --jsx : support JSX syntax
if (process.argv.length > 2) {
    if (process.argv.indexOf("--jsx") !== -1) {
        jsx = true;
    }
    if (process.argv.indexOf("--block-scope") !== -1) {
        block_scope = true;
    }
}

//parser depends on if jsx support is required
//acorn-jsx should work for es6 
//but escope seems to favor esprima in some cases
if (jsx) {
    var acorn = require('acorn-jsx');
} else {
    var esprima = require('esprima');
}

var escope = require('escope');

var input_js = '';
var scopes = [];

//collect input from stdin
process.stdin.resume();
process.stdin.setEncoding('utf8');

process.stdin.on('data', function(chunk) {
    input_js += chunk;
});

process.stdin.on('end', function() {

    var ast;
    
    if (jsx) {
        ast = acorn.parse(input_js, {
            ecmaVersion: 6,
            ranges: true
        });

    } else {
        ast  = esprima.parse(input_js, {
            range: true,
            tolerant:true
        });
    }

    var scopeManager = escope.analyze(ast, {
            optimistic: true,
            ignoreEval: true,
            ecmaVersion: 6
    }); 

    var toplevel = scopeManager.acquire(ast);

    //an array of arrays of variables
    //indexed by level they are defined in
    var variables = [];

    function setLevel(scope, level) {

            var enclosed = {};

            scope.level = level;

            scope.through.forEach(function (ref) {
                    if (ref.resolved) {
                        enclosed[ref.identifier.name] = ref.resolved.scope.level;
                    } else {
                        enclosed[ref.identifier.name] = 0;
                    }
            });           

            scopes.push([level, scope.block.range[0], scope.block.range[1], enclosed]);
            
            if (scope.childScopes.length) {
                    scope.childScopes.forEach(function (s) {
                            //only color function scopes unless use_block_scope is true
                            if (block_scope || s.type === "function") {
                                    setLevel(s, level + 1);
                            } else {
                                    setLevel(s, level);
                            }
                    });
            }

    }

    setLevel(toplevel, 0)

    process.stdout.write(JSON.stringify({
            scopes: scopes
    }));
});
